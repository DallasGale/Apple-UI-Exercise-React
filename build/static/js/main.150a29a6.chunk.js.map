{"version":3,"sources":["components/nav/nav.component.js","App.js","serviceWorker.js","index.js"],"names":["Nav","_ref","children","react_default","a","createElement","id","className","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","responsiveUpdate","activeLink","document","getElementsByClassName","i","length","responsiveRect","getBoundingClientRect","setState","linePosition","Math","round","left","lineWidth","width","transitionFx","_getData","fetch","then","res","json","data","navigation","cities","map","city","state","activeIndex","activeClick","firstLinkActive","refCallBack","bind","assertThisInitialized","toggleActiveClass","el","rect","index","e","preventDefault","target","window","addEventListener","_this2","iterator","nav_component","slice","c","key","section","onClick","ref","concat","href","tabIndex","label","style","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.150a29a6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Nav = ({children}) => {\n    return (\n        <nav id=\"nav\" className=\"nav\">\n            { children }\n        </nav>\n    );\n};\n\nexport default Nav;","import React, { Component } from \"react\";\nimport Nav from \"./components/nav/nav.component\";\nimport \"./App.scss\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeIndex: 1,\n      activeClick: false,\n      firstLinkActive: true,\n      linePosition: 0,\n      lineWidth: 0,\n      navigation: [],\n      transitionFx: null\n    }\n    this.refCallBack = this.refCallBack.bind(this);\n    this.toggleActiveClass= this.toggleActiveClass.bind(this);\n  }\n\n  refCallBack(el) {\n    if (el) {\n      let rect = el.getBoundingClientRect();\n      this.setState({\n        linePosition: Math.round(rect.left) + 'px',\n        lineWidth: Math.round(rect.width) + 'px'\n      })\n    }\n  }\n\n\n  toggleActiveClass(index, e) {\n    e.preventDefault();\n      let active = e.target;\n      let rect = active.getBoundingClientRect();\n\n      this.setState({\n        activeIndex: index,\n        activeClick: !this.state.activeClick,\n        firstLinkActive: false,\n        linePosition: rect.left,\n        lineWidth: rect.width,\n        transitionFx: true,\n      });\n  }\n\n  responsiveUpdate = () => {\n      let activeLink = document.getElementsByClassName('active');\n      for (let i = 0; i < activeLink.length; i++) {\n\n        let responsiveRect = activeLink[i].getBoundingClientRect();\n\n        this.setState({\n          linePosition: Math.round(responsiveRect.left),\n          lineWidth: Math.round(responsiveRect.width),\n          transitionFx: false,\n        })\n      }\n    }\n\n  \n  componentDidMount() {\n      window.addEventListener('resize', this.responsiveUpdate);\n      this._getData();\n  }\n\n  \n\n   // -------------------Fetch Navigation Data-------------------\n  _getData = () => {\n    fetch('https://raw.githubusercontent.com/dgale1983/Apple-UI-Exercise-static/master/dist/navigation.json')\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n       let navigation = data.cities.map(city => city);\n       this.setState({\n         navigation: navigation\n       })\n     });\n     \n }\n\n\n  render() {\n\n    let iterator = 1;\n    let cities = this.state.navigation;\n\n    return (\n      <div className=\"content\">\n        <Nav>\n          <ul id=\"nav-list\" className=\"nav-list\">\n          {\n            cities.slice(0,1).map(c => {\n              return (\n                <li key={c.section } className=\"nav-list__items\">\n                    <a \n                      onClick={this.toggleActiveClass.bind(this, iterator)}\n                      ref={this.refCallBack} \n                      id={ c.section } \n                      className={`nav-list__items-link ${this.state.firstLinkActive ? 'active' : ''}`}\n                      href={`#${c.section}`}\n                      tabIndex={ iterator++ }>\n                        { c.label }\n                    </a>\n                </li>\n              )\n            }\n            )\n          }\n          {\n            cities.slice(1).map(c => {\n              return (\n                  <li key={c.section} className=\"nav-list__items\">\n                      <a \n                        onClick={this.toggleActiveClass.bind(this, iterator)}\n                        id={ c.section } \n                        className={`nav-list__items-link\n                          ${this.state.activeIndex === iterator ? 'active' : ''}`\n                        } \n                        href={`#${c.section}`}\n                        tabIndex={ iterator++ }>\n                          { c.label }\n                      </a>\n                  </li>\n                \n              )\n            })\n          }\n            <div id='active-nav-line' \n              className={`active-nav-line ${this.state.transitionFx ? 'setLineTransition' : '' }`} \n              style={{\n                width: this.state.lineWidth,\n                left: this.state.linePosition,\n              }}>\n\n            </div>\n          </ul>\n        </Nav>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}